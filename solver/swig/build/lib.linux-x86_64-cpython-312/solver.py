# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _solver
else:
    import _solver

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Solver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _solver.Solver_swiginit(self, _solver.new_Solver())

    def FTCS_derivation(self, arg2):
        return _solver.Solver_FTCS_derivation(self, arg2)

    def BTCS_derivation(self, arg2):
        return _solver.Solver_BTCS_derivation(self, arg2)

    def CTCS_derivation(self, arg2):
        return _solver.Solver_CTCS_derivation(self, arg2)
    V = property(_solver.Solver_V_get, _solver.Solver_V_set)
    dt_vals = property(_solver.Solver_dt_vals_get, _solver.Solver_dt_vals_set)
    __swig_destroy__ = _solver.delete_Solver

# Register Solver in _solver:
_solver.Solver_swigregister(Solver)
cvar = _solver.cvar
epsilon = cvar.epsilon
h_bar = cvar.h_bar
m = cvar.m
x_min = cvar.x_min
x_max = cvar.x_max
y_min = cvar.y_min
y_max = cvar.y_max
nx = cvar.nx
ny = cvar.ny
t_max = cvar.t_max

class complex_mat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    re = property(_solver.complex_mat_re_get, _solver.complex_mat_re_set)
    im = property(_solver.complex_mat_im_get, _solver.complex_mat_im_set)

    def __init__(self):
        _solver.complex_mat_swiginit(self, _solver.new_complex_mat())
    __swig_destroy__ = _solver.delete_complex_mat

# Register complex_mat in _solver:
_solver.complex_mat_swigregister(complex_mat)

def init_c_mat(arg1, arg2):
    return _solver.init_c_mat(arg1, arg2)
class ComplexMat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        _solver.ComplexMat_swiginit(self, _solver.new_ComplexMat(arg2, arg3))

    def Re(self, arg2):
        return _solver.ComplexMat_Re(self, arg2)

    def Im(self, arg2):
        return _solver.ComplexMat_Im(self, arg2)
    __swig_destroy__ = _solver.delete_ComplexMat

# Register ComplexMat in _solver:
_solver.ComplexMat_swigregister(ComplexMat)

